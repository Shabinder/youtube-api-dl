package com.shabinder.downloader

import com.shabinder.downloader.exceptions.YoutubeException.BadPageException
import com.shabinder.downloader.models.playlist.PlaylistDetails
import com.shabinder.downloader.models.playlist.PlaylistVideoDetails
import com.shabinder.downloader.models.playlist.YoutubePlaylist
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertFailsWith
import kotlin.test.assertFalse
import kotlin.test.assertNotNull
import kotlin.test.assertNull
import kotlin.test.assertTrue

internal class YoutubePlaylistExtractorTests : YoutubePlaylistTests() {

    @Test
    fun shortPlaylistSuccess() = runBlocking {
        val playlist: YoutubePlaylist = getPlaylist(BRUCE_PLAYLIST_ID)
        testPlaylist(
            playlist,
            BRUCE_PLAYLIST_ID,
            "Bruce lee",
            "Tom De Brito",
            10
        )
        testVideo(
            getVideo(playlist, "xML-j6NsGwM", 1),
            "legend of bruce lee - Enemy.mp4", "andreaboni1", true
        )
        testVideo(
            getVideo(playlist, "DE3er3wDAik", 10),
            "legend of bruce lee - From Heaven.mp4", "andreaboni1", true
        )
    }

    @Test
    fun playlistWithoutAuthorSuccess() = runBlocking {
        val playlist: YoutubePlaylist = getPlaylist(AUTOGENERATED_PLAYLIST_ID)
        assertNull(playlist.details.author, "playlist author should be null")
    }

    // stable
    @Test
    fun longPlaylistSuccess() = runBlocking {
        val playlist: YoutubePlaylist = getPlaylist(LOTR_PLAYLIST_ID)
        testPlaylist(
            playlist, LOTR_PLAYLIST_ID,
            "The Lord of the Rings Complete Recordings",
            "Darkrunn",
            210
        ) // stable
        testVideo(
            getVideo(playlist, "tK_bCeRcGxo", 194),
            "Howard Shore-The Ruins of Dale", "willburowgh", true
        )
        //            testVideo(getVideo(playlist, 207),
        //                    "Dragon-sickness", "Howard Shore - Topic", true);
        val author = "willburowgh"
        val videos: List<PlaylistVideoDetails> = playlist.videos.filter { video ->
            video.author != null && video.author.equals(author)
        }
        assertFalse(videos.isEmpty(), "filtered videos should not be empty")
        videos.forEach { video: PlaylistVideoDetails ->
            assertEquals(
                author,
                video.author,
                "author should be $author"
            )
        }
    }

    @Test
    fun veryLongPlaylistSuccess() = runBlocking {
        val playlist: YoutubePlaylist = getPlaylist(ELECTRO_PLAYLIST_ID)
        testPlaylist(
            playlist, ELECTRO_PLAYLIST_ID,
            "Electronic Music Playlist :D",
            "NuttyMrBubbles",
            -1
        ) // > 2800 videos, unstable
    }

    @Test
    fun livePlaylist() = runBlocking {
        val playlist: YoutubePlaylist = getPlaylist(LIVE_PLAYLIST_ID)
        testPlaylist(playlist, LIVE_PLAYLIST_ID, "Live", "Live", 100)
        var liveCount = 0
        for (video in playlist.videos) {
            if (video.isLive) {
                liveCount++
            }
            assertTrue(video.isPlayable, "live playlist video should be playable")
        }
        val minLiveCount = 90
        assertTrue(
            liveCount > minLiveCount,
            "live playlist should contain at least $minLiveCount live videos"
        )
    }

    @Test
    fun playlistUnavailableThrowsException() = runBlocking {
        assertFailsWith<BadPageException>("get playlist should throw exception for unavailable playlist") {
            getPlaylist("12345678901")
        }
    }

    companion object {
        private fun testPlaylist(
            playlist: YoutubePlaylist,
            playlistId: String,
            title: String,
            author: String,
            size: Int
        ) {
            val details: PlaylistDetails = playlist.details
            assertEquals(title, details.title, "title should be $title")
            assertEquals(author, details.author, "author should be $author")
            val videos: List<PlaylistVideoDetails> = playlist.videos
            val videoCount: Int = if (size < 0) {
                details.videoCount
            } else {
                assertEquals(size, details.videoCount, "playlist size should be $size")
                size
            }
            assertNotNull(videos, "playlist videos should not be null: $playlistId")
            assertEquals(videoCount, videos.size, "size should be $videoCount")
            for (video in videos) {
                if (video.lengthSeconds > 0 && !video.isPlayable) {
                    assertNull(video.author, "Not playable video should not have an author")
                    assertTrue(
                        video.title.equals("[Private video]") || video.title.equals("[Deleted video]"),
                        "Not playable video has a wrong title: " + video.title
                    )
                }
            }
        }

        private fun testVideo(video: PlaylistVideoDetails, title: String, author: String, isPlayable: Boolean) {
            assertEquals(title, video.title, "title should be $title")
            assertEquals(author, video.author, "author should be $author")
            if (isPlayable) {
                assertTrue(video.isPlayable, "video should be playable")
            } else {
                assertFalse(video.isPlayable, "video should not be playable")
            }
        }

        private fun getVideo(playlist: YoutubePlaylist, videoId: String, index: Int): PlaylistVideoDetails {
            val video = playlist.findVideoById(videoId)
            assertNotNull(video, "findVideoById: $videoId should return not null video")
            assertEquals(videoId, video.videoId, "video id should be $videoId")
            if (index > 0) {
                assertEquals(index, video.index, "video index should be $index")
            }
            return video
        }
    }
}
