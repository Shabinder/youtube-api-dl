/*
 *  Copyright (c)  2021  Shabinder Singh
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

@file:Suppress("unused", "SpellCheckingInspection")

package io.github.shabinder

import io.github.shabinder.exceptions.YoutubeException
import io.github.shabinder.models.playlist.PlaylistDetails
import io.github.shabinder.models.playlist.PlaylistVideoDetails
import io.github.shabinder.models.playlist.YoutubePlaylist
import kotlin.coroutines.cancellation.CancellationException
import kotlin.test.assertEquals
import kotlin.test.assertNotNull
import kotlin.test.assertTrue
import kotlin.test.fail

internal abstract class YoutubePlaylistTests  {
    private val downloader: YoutubeDownloader = YoutubeDownloader()

    @Throws(YoutubeException::class, CancellationException::class)
    protected suspend fun getPlaylist(playlistId: String): YoutubePlaylist {
        val playlist: YoutubePlaylist = downloader.getPlaylist(playlistId)
        val details: PlaylistDetails = playlist.details
        assertNotNull(details, "playlist details should not be null: $playlistId")
        assertEquals(playlistId, details.playlistId, "playlistId should be $playlistId")
        assertTrue(details.videoCount > 0, "playlist should have at least 1 video")
        assertTrue(details.viewCount > 0, "video should have at least 1 view")
        return playlist
    }

    companion object {
        // autogenerated playlist without author
        const val AUTOGENERATED_PLAYLIST_ID = "OLAK5uy_kiTxC7OplYPiaW4EqzAdqmtguAY7s7f2g"

        // Bruce Lee - 10 videos - stable
        const val BRUCE_PLAYLIST_ID = "PLC3w7RzH8Yf9Zhgk43XX2w_HEDNptS-Ca"

        // Lord Of The Rings Complete - 210 videos - stable
        const val LOTR_PLAYLIST_ID = "PL924DFB59EB36FA1A"

        // Electronic Music - > 2800 videos - unstable
        const val ELECTRO_PLAYLIST_ID = "PLr0CT5anc-eu8rS9n93DcmIA9Ms0gfZEe"

        // Live playlist (from root live channel) - 100 videos - unstable
        const val LIVE_PLAYLIST_ID = "PLU12uITxBEPH7J8GtRoVmrPLrucyX_hn5"

        fun getVideo(playlist: YoutubePlaylist, index: Int): PlaylistVideoDetails {
            return try {
                val videoDetails: PlaylistVideoDetails = playlist.videos.get(index - 1)
                assertNotNull(videoDetails, "video at index $index should not be null video")
                assertEquals(index, videoDetails.index, "index should be $index")
                videoDetails
            } catch (e: IndexOutOfBoundsException) {
                fail("video at index $index should exist", e)
            }
        }
    }
}
